
===== ./main.js =====
const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');
const { installPackages } = require('./install');

function createWindow() {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      contextIsolation: true,
      nodeIntegration: false
    }
  });

  win.loadFile('index.html');
}

app.whenReady().then(() => {
  createWindow();

ipcMain.on('install-packages', (event, { packages, enableLog }) => {
  installPackages(packages, enableLog ? (msg) => event.sender.send('install-log', msg) : null);
});

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) createWindow();
  });
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit();
});

===== ./preload.js =====
const { contextBridge, ipcRenderer } = require('electron');

contextBridge.exposeInMainWorld('electronAPI', {
  installPackages: (data) => ipcRenderer.send('install-packages', data),
  onLog: (callback) => ipcRenderer.on('install-log', (_, msg) => callback(msg))
});

===== ./renderer.js =====
function installSelected() {
  const selected = Array.from(document.querySelectorAll('input[type="checkbox"]:checked'))
    .map(cb => cb.value);

  if (selected.length === 0) {
    appendOutput('No packages selected.');
    return;
  }

  appendOutput(`Installing: ${selected.join(', ')}`);
window.electronAPI.installPackages({
  packages: selected,
  enableLog: true,
});
}

function installSelectedNoLog() {
  const selected = Array.from(document.querySelectorAll('input[type="checkbox"]:checked'))
    .map(cb => cb.value);

  if (selected.length === 0) {
    appendOutput('No packages selected.');
    return;
  }

  appendOutput(`Running without logging: ${selected.join(', ')}`);
  window.electronAPI.installPackages(selected, false);
}

function appendOutput(msg) {
  const outputDiv = document.getElementById('output');
  const line = document.createElement('pre');
  line.textContent = msg;
  outputDiv.appendChild(line);
}

window.electronAPI.onLog((msg) => {
  appendOutput(msg);
});

===== ./index.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Creative Networks - Device Setup</title>
  <link rel="stylesheet" href="styles.css" />
</head>
<body>
  <header class="topbar">
    <div class="branding">
      <img src="assets/logo.png" alt="Creative Networks" class="logo" />
      <h1>Creative Networks</h1>
    </div>
    <h2>Device Setup Tool</h2>
  </header>

  <main class="container">
    <section class="install-panel">
      <h3>Select Software to Install</h3>
      <div class="package-grid">
        <label><input type="checkbox" value="googlechrome" /> Google Chrome</label>
        <label><input type="checkbox" value="vscode" /> Visual Studio Code</label>
        <label><input type="checkbox" value="slack" /> Slack</label>
        <label><input type="checkbox" value="7zip" /> 7-Zip</label>
        <label><input type="checkbox" value="notepadplusplus" /> Notepad++</label>
      </div>

      <div class="buttons">
        <button onclick="installSelected()">Install Selected</button>
        <button onclick="installSelectedNoLog()">Run Without Logging</button>
      </div>
    </section>

    <section class="output-panel">
      <h3>Installation Output</h3>
      <div id="output" class="output-log"></div>
    </section>
  </main>

  <script src="renderer.js"></script>
</body>
</html>

===== ./styles.css =====
/* Reset & Base */
body {
  margin: 0;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background-color: #0f172a;
  color: #f1f5f9;
}

/* Topbar */
.topbar {
  background-color: #1e293b;
  padding: 20px 30px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.4);
}

.branding {
  display: flex;
  align-items: center;
  gap: 15px;
}

.topbar h1 {
  font-size: 24px;
  margin: 0;
  color: #f97316; /* Orange */
}

.topbar h2 {
  font-size: 18px;
  color: #facc15; /* Soft yellow for subheader */
  margin: 0;
}

.logo {
  height: 40px;
  width: 40px;
}

/* Container */
.container {
  padding: 30px;
  max-width: 900px;
  margin: auto;
  display: flex;
  flex-direction: column;
  gap: 40px;
}

/* Install Panel */
.install-panel {
  background-color: #1e293b;
  padding: 25px;
  border-radius: 12px;
  box-shadow: 0 0 10px rgba(15, 23, 42, 0.5);
}

.install-panel h3 {
  margin-top: 0;
  margin-bottom: 15px;
  font-size: 20px;
  color: #fdba74; /* Light orange */
}

.package-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 12px;
  margin-bottom: 20px;
}

.package-grid label {
  background-color: #334155;
  padding: 12px 16px;
  border-radius: 8px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 10px;
}

.package-grid input[type="checkbox"] {
  accent-color: #f97316;
}

/* Buttons */
.buttons {
  display: flex;
  gap: 15px;
}

button {
  background-color: #f97316;
  border: none;
  color: #0f172a;
  padding: 12px 20px;
  border-radius: 8px;
  font-size: 14px;
  cursor: pointer;
  font-weight: bold;
  transition: background-color 0.2s ease-in-out;
}

button:hover {
  background-color: #ea580c;
}

/* Output Panel */
.output-panel {
  background-color: #1e293b;
  padding: 25px;
  border-radius: 12px;
  box-shadow: 0 0 10px rgba(15, 23, 42, 0.5);
}

.output-panel h3 {
  margin-top: 0;
  font-size: 20px;
  color: #fdba74;
}

.output-log {
  background-color: #0f172a;
  border: 1px solid #334155;
  border-radius: 8px;
  padding: 15px;
  font-family: monospace;
  max-height: 250px;
  overflow-y: auto;
  white-space: pre-wrap;
}
