
===== ./main.js =====
const { ipcMain, app, BrowserWindow } = require('electron');
const path = require('path');
const { installPackages } = require('./scripts/install')

function createWindow() {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      preload: path.join(__dirname, 'preload.js'),
      contextIsolation: true,
      nodeIntegration: false
    }
  });

  win.loadFile('index.html');
}

//Setup app life cycle
app.whenReady().then(() => {
  createWindow();

  app.on('activate', () => {
    if (BrowserWindow.getAllWindows().length === 0) createWindow();
  });
});

//IPC handling 
ipcMain.on('install-packages', (event, packages) => {
  installPackages(packages, (logMessage) => {
    event.sender.send('install-log', logMessage); // Send each log line to renderer
  });
});

//close
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') app.quit();
});

===== ./preload.js =====
const { contextBridge, ipcRenderer } = require('electron');

// Expose limited API to renderer
contextBridge.exposeInMainWorld('electronAPI', {
  installPackages: (packages) => ipcRenderer.send('install-packages', packages),
  onLog: (callback) => ipcRenderer.on('install-log', (event, message) => callback(message))
});


===== ./renderer.js =====
const { ipcRenderer } = require('electron');

// No require needed â€” uses exposed API
function installSelected() {
  console.log("ðŸš€ Install button clicked");

  const checkboxes = document.querySelectorAll('input[type="checkbox"]:checked');
  const packages = Array.from(checkboxes).map(cb => cb.value);

  console.log("Packages selected:", packages);

  window.electronAPI.installPackages(packages);
}

window.electronAPI.onLog((message) => {
  const output = document.getElementById('output');
  const line = document.createElement('div');
  line.textContent = message;
  output.appendChild(line);
  output.scrollTop = output.scrollHeight;
});

window.installSelected = installSelected;

===== ./index.html =====
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>New User Setup</title>
  <link rel="stylesheet" href="styles.css" />
  </head>
<body>
  <div class="container">
    <h1>Install Programs</h1>

    <div class="package-option">
      <label><input type="checkbox" value="googlechrome"> Google Chrome</label>
    </div>

    <div class="package-option">
      <label><input type="checkbox" value="vscode"> Visual Studio Code</label>
    </div>

    <div class="package-option">
      <label><input type="checkbox" value="slack"> Slack</label>
    </div>

    <button onclick="installSelected()">Install Selected</button>

    <div id="output"></div>
  </div>

  <script src="renderer.js"></script>
</body>
</html>

  

===== ./styles.css =====
<style>
  body {
    margin: 0;
    padding: 2rem;
    font-family: 'Segoe UI', sans-serif;
    background-color: #ffffff; /* white background */
    color: #222;
  }

  h1 {
    font-size: 2rem;
    margin-bottom: 1.5rem;
  }

  .container {
    max-width: 600px;
    margin: 0 auto;
    background: white;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 10px 25px rgba(0,0,0,0.05); /* lighter shadow for a clean look */
  }

  .package-option {
    margin-bottom: 1rem;
  }

  button {
    margin-top: 1rem;
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    background-color: #f57c00; /* orange primary button */
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:hover {
    background-color: #e06b00; /* darker orange on hover */
  }

#output {
  border: 1px solid #ccc;
  padding: 10px;
  height: 300px;
  overflow-y: auto;
  font-family: monospace;
  background: #f9f9f9;
  margin-top: 20px;
}
</style>

===== ./scripts/install.js =====
const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

function installPackages(packageNames, sendLog) {
  // Use system TEMP folder to store the log safely
  const logPath = path.join(process.env.TEMP || 'C:\\Temp', 'install-log.txt');
  const logStream = fs.createWriteStream(logPath, { flags: 'a' });

  function log(msg) {
    const timestamped = `[${new Date().toISOString()}] ${msg}`;
    logStream.write(timestamped + '\n');
    if (sendLog) sendLog(timestamped);
  }

  const chocoInstallCmd = `
    Set-ExecutionPolicy Bypass -Scope Process -Force;
    [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;
    iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
  `;

  const chocoUninstallCmd = `
    choco uninstall chocolatey -y;
    Remove-Item -Path "C:\\ProgramData\\chocolatey" -Recurse -Force
  `;

  const installCommands = packageNames.map(pkg => `choco install ${pkg} -y`);
  const fullCmd = `
    powershell -ExecutionPolicy Bypass -Command "${chocoInstallCmd} && ${installCommands.join(' && ')} && ${chocoUninstallCmd}"
  `;

  log('Starting install process...');

  exec(fullCmd, (error, stdout, stderr) => {
    if (stdout) log(`OUTPUT:\n${stdout}`);
    if (stderr) log(`ERROR:\n${stderr}`);

    if (error) {
      log(`INSTALL FAILED: ${error.message}`);

      // Write a visible error message to the desktop
      const desktopPath = path.join(process.env.PUBLIC || 'C:\\Users\\Public', 'Desktop');
      const errorPath = path.join(desktopPath, 'install_error.txt');
      const errorMessage = `Installation failed:\n\n${stderr || error.message}`;

      fs.writeFile(errorPath, errorMessage, (writeErr) => {
        if (writeErr) {
          log(`Failed to write desktop error log: ${writeErr.message}`);
        } else {
          log(`Wrote error log to desktop: ${errorPath}`);
        }
      });
    } else {
      log('âœ… Installation complete and Chocolatey removed.');
    }

    logStream.end();
  });
}

module.exports = { installPackages };
